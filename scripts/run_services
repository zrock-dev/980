#!/bin/bash
#
# Script: run_services
# Description: This script runs services according to the specified execution order, with optional logging of stdout and stderr.
# Author: [Santiago C. Saavedra]
# Date: [07/09/2023]

logging=false

while [[ $# -gt 0 ]]; do
  case "$1" in
    --log)
      logging=true
      shift
      ;;
    --help)
      echo "Usage: $0 <execution_order_file> <path/to/binaries> <path/to/logs> [--log]"
      echo "  --log  When specified, services will write stdout and stderr to a log file in the log path"
      exit 0
      ;;
    *)
      break
      ;;
  esac
done

logs_path=logs
check_for_logging(){
  if [ $logging = true ]; then
    if ! [ -d "$logs_path" ]; then
      mkdir "$logs_path"
    fi
  fi
}

# Define paths
execution_order_file=$(realpath "$1")
if ! [ -f "$execution_order_file" ]; then
  printf "Invalid execution path\n %s" "$execution_order_file" >&2
  exit 1 
fi

binaries_path=$(realpath "$2")
check_for_logging

handle_logging(){
  file=$1
  if [ $logging = true ]; then
    log_file_name="$file.log"
    if ! [ -f "$log_file_name" ]; then
      touch "$log_file_name"
    fi
    { printf '%.s-' {1..50}; echo; date; echo "This is a new run"; printf '%.s-' {1..50}; echo -e "\n"; } >> "$log_file_name"
  fi
}

mapfile -t main_array < "$execution_order_file"
for file in "${main_array[@]}"; do
  handle_logging "$file"

  folder=$(find "$binaries_path" -type d -name "$file*boot*")
  if [ -z "$folder" ]; then
    echo "Could not find binary: $file" >&2
    exit 1 
  fi

  binary="$folder/bin/$file"
  if [ $logging = true ]; then
    "$binary" >> "$logs_path/$log_file_name" 2>&1  &
  else
    "$binary" > /dev/null 2>&1 &
  fi

  bg_pid=$!
  echo "$file has started with process PID: $bg_pid"
done

exit 0
